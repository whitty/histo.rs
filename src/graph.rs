
pub struct Histogram {
    buckets: Vec<(String, i64)>,
}

impl Histogram {

    pub fn new<T: Into<i64> + Copy>(buckets: &Vec<(T, &str)>) -> Histogram {
        return Self::new_it(&mut buckets.iter().map(|(x, title)| (*x, title.to_string())));
    }

    pub fn new_it<T: Into<i64> + Copy, It: Iterator<Item = (T, String)>>(buckets: &mut It) -> Histogram {
        return Histogram { buckets: buckets.map( |(x, title)| (title, x.into())).collect() }
    }

    pub fn new_indexed_it<T: Into<i64> + Copy, It: Iterator<Item = T>>(buckets: &mut It) -> Histogram {
        return Histogram { buckets: buckets.enumerate().map( |(ix, x)| (ix.to_string(), x.into())).collect() }
    }

    pub fn new_indexed<T: Into<i64> + Copy>(buckets: &Vec<T>) -> Histogram {
        return Self::new_indexed_it(&mut buckets.iter().map(|x| *x));
    }

    pub fn draw(&self) -> String {
        asciigraph::Graph::new(72, 25)
            .set_1d_labeled_data(self.buckets.clone())
            .draw()
    }
}


#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_draw() {
        // TODO - not a test
        let h = Histogram::new_indexed(&vec![100, 200, 300, 400, 200, 100]);
        let s = h.draw();
        println!("{}", s);
        assert_eq!(s, "426 |                                                                        \n    |                                    ▄▄▄▄▄▄▄▄▄▄▄▄                        \n    |                                    ████████████                        \n378 |                                    ████████████                        \n    |                                    ████████████                        \n    |                                    ████████████                        \n330 |                                    ████████████                        \n    |                        ▄▄▄▄▄▄▄▄▄▄▄▄████████████                        \n    |                        ████████████████████████                        \n282 |                        ████████████████████████                        \n    |                        ████████████████████████                        \n    |                        ████████████████████████                        \n234 |                        ████████████████████████                        \n    |                        ████████████████████████                        \n    |            ████████████████████████████████████████████████            \n186 |            ████████████████████████████████████████████████            \n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n100 |████████████████████████████████████████████████████████████████████████\n    |████████████████████████████████████████████████████████████████████████\n    |████████████████████████████████████████████████████████████████████████\n 97 |████████████████████████████████████████████████████████████████████████\n    |████████████████████████████████████████████████████████████████████████\n    |████████████████████████████████████████████████████████████████████████\n 94 |████████████████████████████████████████████████████████████████████████\n    └------------------------------------------------------------------------\n     0       0       1       2       2       3       4       4       5       \n");

        let h = Histogram::new(&vec![(100, "1-5"), (200, "6-10"), (300, "11-15"), (400, "16-20"), (200, "21-25"), (100, "25-30"), (0, "31-35")]);
        let s = h.draw();
        println!("{}", s);
        assert_eq!(s, "451 |                                                                        \n    |                                                                        \n    |                               ▄▄▄▄▄▄▄▄▄▄▄                              \n391 |                               ███████████                              \n    |                               ███████████                              \n    |                               ███████████                              \n331 |                               ███████████                              \n    |                     ▄▄▄▄▄▄▄▄▄▄███████████                              \n    |                     █████████████████████                              \n271 |                     █████████████████████                              \n    |                     █████████████████████                              \n    |                     █████████████████████                              \n211 |           ▄▄▄▄▄▄▄▄▄▄█████████████████████▄▄▄▄▄▄▄▄▄▄                    \n    |           █████████████████████████████████████████                    \n    |           █████████████████████████████████████████                    \n151 |           █████████████████████████████████████████                    \n    |           █████████████████████████████████████████                    \n    |▄▄▄▄▄▄▄▄▄▄▄█████████████████████████████████████████▄▄▄▄▄▄▄▄▄▄          \n 91 |██████████████████████████████████████████████████████████████          \n    |██████████████████████████████████████████████████████████████          \n    |██████████████████████████████████████████████████████████████          \n 31 |██████████████████████████████████████████████████████████████          \n    |██████████████████████████████████████████████████████████████▄▄▄▄▄▄▄▄▄▄\n    |████████████████████████████████████████████████████████████████████████\n-29 |████████████████████████████████████████████████████████████████████████\n    └------------------------------------------------------------------------\n     1-5     1-5     6-10    11-15   16-20   16-20   21-25   25-30   31-35   \n");
    }

}
