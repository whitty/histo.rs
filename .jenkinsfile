def build_os_vers = ["22.04", "24.04"]

def parallel_versions = [:]

for (ver in build_os_vers) {
  def version = ver;

  parallel_versions[version] = {
    node("${version} && rustup") {
      def src = null;

      withEnv(["PATH+RUST=${HOME}/.cargo/bin"]) {

        stage("${version}-preparation") {
          src = checkout(scm)
          sh "sudo apt install -y bats"
        }

        for (rev in ['', '-norestrict']) {

          stage("${version}-build${rev}") {
            sh "cargo build"
          }

          stage("${version}-check${rev}") {
            sh "cargo check --message-format json > target/report${rev}-${version}.log"
            recordIssues(aggregatingResults: true, publishAllIssues: true,
                         tools: [cargo(id: "cargo-check${rev}-${version}",
                                       name: "Check ${version}${rev}",
                                       pattern: "**/target/report${rev}-${version}.log")])
          }

          stage("${version}-test${rev}") {
            warnError("test") {
              sh "cargo test"
            }
          }

          stage("${version}-clippy${rev}") {
            warnError("clippy") {
              sh "cargo clippy --message-format json > target/report${rev}-${version}.log"
              recordIssues(aggregatingResults: true, publishAllIssues: true,
                           tools: [cargo(id: "cargo-clippy${rev}-${version}",
                                         name: "Clippy ${version}${rev}",
                                         pattern: "**/target/report${rev}-${version}.log")])
            }
          }

          stage("${version}-run${rev}") {
            for (cmd in [
              '--help',
              'simple .jenkinsfile',
              'simple --height 25 .jenkinsfile',
              'time-diff --height 25 tests/example.txt',
              "time-diff --height 25 --time-select '^(\\d+)' tests/example.txt",
            ]) {
              warnError("run") {
                sh "cargo run -- $cmd"
              }
            }
          }

          if (rev == "") {
            stage("${version}-bats") {
              sh "bats tests/"
            }
          }

          sh "rm -f rust-toolchain.toml Cargo.lock"

        } // rev

      }

    } //node

  } // parallel_versions

} // versions
parallel parallel_versions
