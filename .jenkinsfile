def build_os_vers = ["22.04", "24.04"]

def parallel_versions = [:]

def has_analyzer = [
  '': true,
  '-1.63': false,
  '-norestrict': true,
]

for (ver in build_os_vers) {
  def version = ver;

  parallel_versions[version] = {
    node("${version} && rustup") {
      def src = null;

      withEnv(["PATH+RUST=${HOME}/.cargo/bin"]) {

        stage("${version}-preparation") {
          src = checkout(scm)
          sh "sudo apt update && sudo apt install --no-install-recommends -y bats mingw-w64 wine64 wine"
        }

        for (rev in ['', '-1.63', '-norestrict']) {

          stage("${version}-build${rev}") {
            sh "cargo build"
          }

          stage("${version}-check${rev}") {
            sh "cargo check --message-format json > target/report${rev}-${version}.log"
            recordIssues(aggregatingResults: true, publishAllIssues: true,
                         tools: [cargo(id: "cargo-check${rev}-${version}",
                                       name: "Check ${version}${rev}",
                                       pattern: "**/target/report${rev}-${version}.log")])
          }

          stage("${version}-test${rev}") {
            warnError("test") {
              sh "cargo test"
            }
          }

          if (has_analyzer[rev]) {
            stage("${version}-clippy${rev}") {
              warnError("clippy") {
                sh "cargo clippy --message-format json -- --deny warnings > target/report${rev}-${version}.log"
                recordIssues(aggregatingResults: true, publishAllIssues: true,
                             tools: [cargo(id: "cargo-clippy${rev}-${version}",
                                           name: "Clippy ${version}${rev}",
                                           pattern: "**/target/report${rev}-${version}.log")])
              }
            }
          }

          stage("${version}-run${rev}") {
            for (cmd in [
              '--help',
              'simple .jenkinsfile',
              'simple --width 65 .jenkinsfile',
              'time-diff --width 65 tests/example.txt',
              "time-diff --width 65 --time-select '^(\\d+)' tests/example.txt",
            ]) {
              warnError("run") {
                sh "cargo run -- $cmd"
              }
            }
          }

          if (rev == "") {
            stage("${version}-bats") {
              sh "bats tests/"
            }

            stage("${version}-build-windows${rev}") {
              sh "cargo build --target x86_64-pc-windows-gnu"
            }

            stage("${version}-clippy-windows${rev}") {
              warnError("clippy") {
                sh "cargo clippy --target x86_64-pc-windows-gnu --message-format json -- --deny warnings > target/report-windows${rev}-${version}.log"
                recordIssues(aggregatingResults: true, publishAllIssues: true,
                             tools: [cargo(id: "cargo-clippy-windows${rev}-${version}",
                                           name: "Clippy windows-${version}${rev}",
                                           pattern: "**/target/report-windows${rev}-${version}.log")])
              }
            }

            stage("${version}-test-windows${rev}") {
              sh "env CARGO_TARGET_X86_64_PC_WINDOWS_GNU_RUNNER=wine cargo test --target x86_64-pc-windows-gnu"
            }
          }

          stage("${version}-build-no-default${rev}") {
              sh "cargo build --no-default-features"
          }

          stage("${version}-test-no-default${rev}") {
            warnError("test") {
              sh "cargo test --no-default-features"
            }
          }

          if (rev == '') {
            sh "sed -i '/^channel/ s/1\\.75/1.63/' rust-toolchain.toml"
            // TODO - in 24.04 or later rust the 1.63 toolchain doesn't install
            sh "rustup toolchain add 1.63 --profile minimal"
          } else if (rev == '-1.63') {
            sh "rm -f rust-toolchain.toml Cargo.lock"
          }

        } // rev

      }

    } //node

  } // parallel_versions

} // versions
parallel parallel_versions
